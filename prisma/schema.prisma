generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id              String    @id @default(cuid())
  name            String
  username        String    @unique
  bio             String?
  email           String    @unique
  emailVerified   DateTime?
  image           String?
  coverImage      String?
  profileImage    String?
  hashPassword    String?
  hasNotification Boolean?
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt

  posts        Post[]
  comments     Comment[]
  notification Notification[]
  followers    Follow[]       @relation("followers")
  following    Follow[]       @relation("following")
  like         Like[]
}

model Post {
  id        String   @id @default(cuid())
  body      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user   User?   @relation(fields: [userId], references: [id])
  userId String?

  comments Comment[]
  like     Like[]
}

model Comment {
  id        String   @id @default(cuid())
  body      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user   User?   @relation(fields: [userId], references: [id])
  userId String?

  post   Post?   @relation(fields: [postId], references: [id])
  postId String?
}

model Notification {
  id        String   @id @default(cuid())
  body      String
  createdId DateTime @default(now())
  User      User     @relation(fields: [userId], references: [id])
  userId    String   @unique
}

model Follow {
  id          String  @unique @default(cuid())
  follower    User?   @relation("followers", fields: [followerId], references: [id])
  followerId  String?
  following   User?   @relation("following", fields: [followingId], references: [id])
  followingId String?
}

model Like {
  post   Post   @relation(fields: [postId], references: [id])
  postId String

  user   User   @relation(fields: [userId], references: [id])
  userId String

  @@id([postId, userId])
}
